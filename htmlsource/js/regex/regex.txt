정규 표현식, Regex(Regular Expression) 
: 문자 검색, 교체에 사용되는 패턴

- pattern은 이미 정의되어 있다. 

pattern 생성
 - /기호/플래그

플래그
 g : 전역검색(전체 문서에 해당)
 i : 대소문자 구별 없는 검색
 m : 다중 행 검색


플래그	의미	    설명
g	    Global	    전역 검색: 매칭되는 모든 항목 찾음 (없으면 첫 번째 매칭만 반환)
i	    Ignore case	대소문자 구분 없이 찾음 (A와 a를 같은 것으로 처리)
m	    Multiline	여러 줄 검색: ^는 줄 시작, $는 줄 끝으로 작동
s	    Dotall	    .이 줄바꿈 문자(\n)도 포함하도록 허용
u	    Unicode	    유니코드 모드 활성화 (문자열을 코드포인트 단위로 처리)
y	    Sticky	    고정 검색: lastIndex 위치부터만 일치하는지 확인

패턴  의미                                                예제
.     (특수)문자, 공백, 기호... 어떤 문자가 와도 매칭.
\.    마침표 찾음. "\"원래 기호대로 인식.                \..\. => o.k. 에서 ".k."
                                                                 안.녕. 에서 ".녕."
[]    대괄호 안에 들어있는 문자 개별로 매칭              [abc] => a or b or c  
                                                           [A-Z] => 대문자 26 모든 문자.
                                                           [가-힣]=>모든 한글

 [A-Ca-d2-6]
 항목	의미
A-C	대문자 A, B, C 중 하나
a-d	소문자 a, b, c, d 중 하나
2-6	숫자 2, 3, 4, 5, 6 중 하나

[^패턴] : 대괄호 안에 ^는 포함하지 않는

 [^a-z]
 소문자 알파벳이 아닌 문자
[] → 문자 집합: 괄호 안에 있는 문자 중 하나와 일치
a-z → 소문자 a부터 z까지
^ → 부정(NOT) 을 의미 (문자 집합 안에서만!)


 기호	의미	                예시
.	    임의의 한 문자	        a.c → "abc", "axc" 일치
*	    앞 문자가 0번 이상 반복	lo* → "lo", "loo", "looo" 등
+	    앞 문자가 1번 이상 반복	lo+ → "lo", "loo" 등
?	    앞 문자가 0번 또는 1번	colou?r → "color", "colour" 모두 일치
^	    문자열의 시작	        ^Hello → "Hello world" 일치
$	    문자열의 끝	            world$ → "Hello world" 일치
[]	    문자 집합	            [abc] → "a", "b", "c" 중 하나
[^]	    부정 문자 집합      	[^abc] → "a", "b", "c" 제외한 문자
{n}	    n번 반복	            a{3} → "aaa"
{n,}	n번 이상 반복	        a{2,} → "aa", "aaa", "aaaa" 등
{n,m}	n~m번 반복	            a{2,4} → "aa", "aaa", "aaaa"
`	`	OR 조건
()	    그룹	                (ab)+ → "ab", "abab" 등


() : 캡쳐링, 그룹.....보관하고 있다.
ex ) (on|use|rida) : 문자 안에 on or use or rida 가 포함된

..(id|esd|nd)ay
=>(다 해당됨!) MondayTuesdayFriday


수량
+ : 최소 1 ~ 최대 무제한, 개별이 아니라 한꺼번에 잡게 됨.
* : 최소 0 ~ 최대 무제한

?
{숫자1} : 지정된 숫자만 허용
{숫자1, 숫자2} :  최소 숫자 1 ~ 최대 숫자 2
{숫자1} : 최소 숫자 1 ~ 최대 무재한

ex
[a-z]+ : 소문자 최소 1 ~ 최대 무제한
[a-z]* : : 소문자 최소 1 ~ 최대 무제한
[a-z]? : : 소문자 하나 또는 없음


/<i>.+<\/i>/g : i 태그 추출
<i>greedy</i>abd <i>lazy</i>matching

개별이 아니라 수량을 주고서 부터 나오는 차이, 개념.
적극적(탐욕적) 일치와 소극적 일치
결과 : <i>greedy</i>abd <i>lazy</i> => 적극적(탐욕적) 방식이 기본임.

탐욕적 매칭 (.+):
가능한 한 많은 문자를 포함해 단일 매칭으로 확장.
→ 결과: <i>greedy</i>abd <i>lazy</i>

/<i>.+?<\/i>/g : 소극적 일치로 변경
결과 : <i>greedy</i>,  <i>lazy</i>

비탐욕적 매칭 (.+?):
최소한의 문자만 포함해 가능한 한 빨리 매칭 종료.
→ 결과: <i>greedy</i> 와 <i>lazy</i> 각각 개별 매칭



\w == [A-Za-z0-9_]
\W == [^A-Za-z0-9_]
\s == 공백
\S == 공백 제외한
\d == 숫자
\D == 숫자 제외한

^ : 시작하는
$ : 끝나는

\s+

(http)s?:\/\/[A-Za-z]+\.[A-Za-z]+.*


자바스크립트 정규 표현식
정규식 생성
 - /패턴/플래그
 - new RegExp("패턴", "플래그")

 메소드
 - test() : 정규식 메서드 => 패턴과 일치하면 true, 일치하지 않는 경우 false
 - exec() : 정규식 메서드 => 일치하는 문자열 돌려줌
 - match() : string 메서드 => exec() 같은 개념
 - search() : string 메서드 => 패턴이 시작하는 인덱스
 - replace() : string 메서드
 - split() : string 메서드
